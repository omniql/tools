// Code generated by mockery v1.0.0
package mocks

import fieldgen "github.com/omniql/tools/fieldgen"
import hybrids "github.com/nebtex/hybrids/golang/hybrids"
import mock "github.com/stretchr/testify/mock"
import reflect "github.com/omniql/reflect"

// Generator is an autogenerated mock type for the Generator type
type Generator struct {
	mock.Mock
}

// Boolean provides a mock function with given fields: path, field
func (_m *Generator) Boolean(path string, field reflect.FieldContainer) (bool, error) {
	ret := _m.Called(path, field)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) bool); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Byte provides a mock function with given fields: path, field
func (_m *Generator) Byte(path string, field reflect.FieldContainer) ([]byte, error) {
	ret := _m.Called(path, field)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) []byte); ok {
		r0 = rf(path, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Enumeration provides a mock function with given fields:
func (_m *Generator) Enumeration() fieldgen.EnumerationGenerator {
	ret := _m.Called()

	var r0 fieldgen.EnumerationGenerator
	if rf, ok := ret.Get(0).(func() fieldgen.EnumerationGenerator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fieldgen.EnumerationGenerator)
		}
	}

	return r0
}

// Float32 provides a mock function with given fields: path, field
func (_m *Generator) Float32(path string, field reflect.FieldContainer) (float32, error) {
	ret := _m.Called(path, field)

	var r0 float32
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) float32); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Float64 provides a mock function with given fields: path, field
func (_m *Generator) Float64(path string, field reflect.FieldContainer) (float64, error) {
	ret := _m.Called(path, field)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) float64); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int16 provides a mock function with given fields: path, field
func (_m *Generator) Int16(path string, field reflect.FieldContainer) (int16, error) {
	ret := _m.Called(path, field)

	var r0 int16
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) int16); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(int16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int32 provides a mock function with given fields: path, field
func (_m *Generator) Int32(path string, field reflect.FieldContainer) (int32, error) {
	ret := _m.Called(path, field)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) int32); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int64 provides a mock function with given fields: path, field
func (_m *Generator) Int64(path string, field reflect.FieldContainer) (int64, error) {
	ret := _m.Called(path, field)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) int64); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int8 provides a mock function with given fields: path, field
func (_m *Generator) Int8(path string, field reflect.FieldContainer) (int8, error) {
	ret := _m.Called(path, field)

	var r0 int8
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) int8); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(int8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceID provides a mock function with given fields: path, field, resourceIdType
func (_m *Generator) ResourceID(path string, field reflect.FieldContainer, resourceIdType hybrids.ResourceIDType) ([]byte, error) {
	ret := _m.Called(path, field, resourceIdType)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer, hybrids.ResourceIDType) []byte); ok {
		r0 = rf(path, field, resourceIdType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer, hybrids.ResourceIDType) error); ok {
		r1 = rf(path, field, resourceIdType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShouldBeNil provides a mock function with given fields: path, ot
func (_m *Generator) ShouldBeNil(path string, ot reflect.FieldContainer) (bool, error) {
	ret := _m.Called(path, ot)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) bool); ok {
		r0 = rf(path, ot)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, ot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShouldGenerateField provides a mock function with given fields: path, table
func (_m *Generator) ShouldGenerateField(path string, table reflect.FieldContainer) (bool, error) {
	ret := _m.Called(path, table)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) bool); ok {
		r0 = rf(path, table)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields: path, field
func (_m *Generator) String(path string, field reflect.FieldContainer) (string, error) {
	ret := _m.Called(path, field)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) string); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint16 provides a mock function with given fields: path, field
func (_m *Generator) Uint16(path string, field reflect.FieldContainer) (uint16, error) {
	ret := _m.Called(path, field)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) uint16); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint32 provides a mock function with given fields: path, field
func (_m *Generator) Uint32(path string, field reflect.FieldContainer) (uint32, error) {
	ret := _m.Called(path, field)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) uint32); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint64 provides a mock function with given fields: path, field
func (_m *Generator) Uint64(path string, field reflect.FieldContainer) (uint64, error) {
	ret := _m.Called(path, field)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) uint64); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint8 provides a mock function with given fields: path, field
func (_m *Generator) Uint8(path string, field reflect.FieldContainer) (uint8, error) {
	ret := _m.Called(path, field)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) uint8); ok {
		r0 = rf(path, field)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Union provides a mock function with given fields:
func (_m *Generator) Union() fieldgen.UnionGenerator {
	ret := _m.Called()

	var r0 fieldgen.UnionGenerator
	if rf, ok := ret.Get(0).(func() fieldgen.UnionGenerator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fieldgen.UnionGenerator)
		}
	}

	return r0
}

// VectorLen provides a mock function with given fields: path, ot
func (_m *Generator) VectorLen(path string, ot reflect.FieldContainer) (int, error) {
	ret := _m.Called(path, ot)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, reflect.FieldContainer) int); ok {
		r0 = rf(path, ot)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, reflect.FieldContainer) error); ok {
		r1 = rf(path, ot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
