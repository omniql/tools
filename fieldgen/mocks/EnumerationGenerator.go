// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import oreflection "github.com/nebtex/omniql/commons/golang/oreflection"

// EnumerationGenerator is an autogenerated mock type for the EnumerationGenerator type
type EnumerationGenerator struct {
	mock.Mock
}

// ShouldGenerateString provides a mock function with given fields: path, fieldType
func (_m *EnumerationGenerator) ShouldGenerateString(path string, fieldType oreflection.OType) (bool, error) {
	ret := _m.Called(path, fieldType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, oreflection.OType) bool); ok {
		r0 = rf(path, fieldType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType) error); ok {
		r1 = rf(path, fieldType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StringEnumeration provides a mock function with given fields: path, fieldType
func (_m *EnumerationGenerator) StringEnumeration(path string, fieldType oreflection.OType) (string, error) {
	ret := _m.Called(path, fieldType)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, oreflection.OType) string); ok {
		r0 = rf(path, fieldType)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType) error); ok {
		r1 = rf(path, fieldType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint16Enumeration provides a mock function with given fields: path, fieldType
func (_m *EnumerationGenerator) Uint16Enumeration(path string, fieldType oreflection.OType) (uint16, error) {
	ret := _m.Called(path, fieldType)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(string, oreflection.OType) uint16); ok {
		r0 = rf(path, fieldType)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType) error); ok {
		r1 = rf(path, fieldType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint32Enumeration provides a mock function with given fields: path, fieldType
func (_m *EnumerationGenerator) Uint32Enumeration(path string, fieldType oreflection.OType) (uint32, error) {
	ret := _m.Called(path, fieldType)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string, oreflection.OType) uint32); ok {
		r0 = rf(path, fieldType)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType) error); ok {
		r1 = rf(path, fieldType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uint8Enumeration provides a mock function with given fields: path, fieldType
func (_m *EnumerationGenerator) Uint8Enumeration(path string, fieldType oreflection.OType) (uint8, error) {
	ret := _m.Called(path, fieldType)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(string, oreflection.OType) uint8); ok {
		r0 = rf(path, fieldType)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, oreflection.OType) error); ok {
		r1 = rf(path, fieldType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
